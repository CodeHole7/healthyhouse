{"version":3,"sources":["plugin/vue-autocomplete.js"],"names":["window","VueGoogleAutocomplete","name","placeholder","type","String","default","required","country","types","enableGeolocation","Boolean","Array","data","autocomplete","autocompleteText","watch","newVal","oldVal","this","mounted","options","componentRestrictions","google","place","_this","maps","places","document","getElementById","id","addListener","addressComponents","getPlace","administrative_area_level_1","locality","i","address_components","returnData","undefined","location","lng","addressType","$emit","val","geometry","lat","value","onFocus","onChange","methods","geolocate","onBlur","onKeyPress","event","clear","blur","focus","update","$refs","circle","center","geolocation","_this2","navigator","getCurrentPosition","position","coords","latitude","longitude","Circle","radius","accuracy","setBounds","getBounds"],"mappings":"aAAAA,OAAOC,uBACHC,KAAM,wBAANA,SAAAA,0SAwBIC,OACIC,UAAMC,YACNC,IAXDF,KAAAC,OAICE,UAAU,GAYVD,UAAAA,OAPJH,aAUAK,KAASH,OACLD,QAAOC,gBANXI,OAUAC,KAAAA,OACIN,QAAMO,YAzCaH,SAoCnBJ,MAAOC,OAAQO,OAUjBN,QAASO,MANXH,mBACIN,KAAMO,QACNL,SAAS,IAIjBO,KAAM,WAUE,OAFAC,aAAc,KAMdC,iBAAkB,KAatBC,OARAD,iBAAkB,SAA0BE,EAAQC,GAUhDC,KAAKV,MAAT,eAAgBQ,OAAAA,EAAAC,OAAAA,MAIhBE,QAAI,WACAC,IAAAA,EAAQC,KAAwBD,KALhCF,KAAKV,QAUTY,EAAKP,OAAeK,KAAII,QANpBJ,KAAKX,UAULa,EAAIG,uBARAhB,QAASW,KAAKX,UAadiB,KAAAA,aAAY,IAAAF,OAAAG,KAAAC,OAAoBH,aAAhCI,SAAAC,eAAAV,KAAAW,IAAAT,GAEHF,KAAAL,aAAAiB,YAAA,gBAAA,WAED,IAAIC,EAAAA,EAAAA,aAAoBC,WAEpBC,GAAAA,EAAAA,SAAAA,CAOA,IAAAF,GACAG,SAASC,YACLF,4BAAwBG,aAR5B7B,QAAS,aAYD8B,KAEP,QAAAC,IAAAf,EAAAa,mBAAA,CAEDC,IAAAA,IAAAA,EAAW,EAAAF,EAAAZ,EAAcA,mBAAegB,OAAfJ,IAAzB,CACAE,IAAAA,EAAAd,EAA0BA,mBAAegB,GAASC,MAAlD,GAEA,GAAAT,EAAAU,GAAA,CACMC,IAAMC,EAAApB,EAAAa,mBAA4Bb,GAAxCQ,EAAAU,IARQJ,EAAWI,GAAeE,GAarCN,EAAA,SAAAd,EAAAqB,SAAAL,SAAAM,MAvCLR,EAAA,UAAAd,EAAAqB,SAAAL,SAAAC,MA2CKhB,EAAAkB,MAAA,eAAAL,EAAAd,EAAAC,EAAAK,IANGL,EAAMV,iBAAmBa,SAASC,eAAeJ,EAAMK,IAAIiB,MAUnEC,EAASC,iBAxCDxB,EAAMkB,MAAM,mBAAoBnB,MA8CxC0B,SAIIF,QAAKL,WAdJxB,KAAAgC,YAMDhC,KAAKwB,MAAM,UAOfS,OAAQ,WAaRjC,KAAAwB,MAAA,SALAM,SAAU,WAcV9B,KAAAwB,MAAA,SAAAxB,KAAAJ,mBALAsC,WAAY,SAAoBC,GAC5BnC,KAAKwB,MAAM,WAAYW,IAO3BC,MAAO,WAgBPC,KAAMzC,iBAAgB,IARtB0C,MAAO,WAiBPC,KAAQC,MAAA7C,aAAgBiC,SAQpBS,KAAA,WAhBArC,KAAKwC,MAAM7C,aAAa0C,QAyBZE,OAAA,SAAIE,GACAC,KAAAA,iBAAQC,GAMvBX,UAAA,WACJ,IAAAY,EAAA5C,KA1NTA,KAAAT,mBA4MoBsD,UAAUF,aACVE,UAAUF,YAAYG,mBAAmB,SAASC,GAC9C,IAAIJ,GACAhB,IAAKoB,EAASC,OAAOC,SACrB3B,IAAKyB,EAASC,OAAOE,WAErBT,EAAS,IAAIrC,OAAOG,KAAK4C,QACzBT,OAAQC,EACRS,OAAQL,EAASC,OAAOK,WAE5BT,EAAOjD,aAAa2D,UAAUb,EAAOc","file":"vue-autocomplete.js","sourcesContent":["window.VueGoogleAutocomplete = {\n    name: 'VueGoogleAutocomplete',\n\n    template: `<input\n        ref=\"autocomplete\"\n        type=\"text\"\n        :class=\"classname\"\n        :id=\"id\"\n        :placeholder=\"placeholder\"\n        v-model=\"autocompleteText\"\n        @focus=\"onFocus()\"\n        @blur=\"onBlur()\"\n        @change=\"onChange\"\n        @keypress=\"onKeyPress\"\n    />`,\n\n    props: {\n        location: ['location'],\n        id: {\n            type: String,\n            required: true\n        },\n\n        classname: String,\n\n        placeholder: {\n            type: String,\n            default: 'Start typing'\n        },\n\n        types: {\n            type: String,\n            default: '(cities)'\n        },\n\n        country: {\n            type: [String, Array],\n            default: null\n        },\n\n        enableGeolocation: {\n            type: Boolean,\n            default: false\n        }\n    },\n\n    data: function data() {\n        return {\n            /**\n             * The Autocomplete object.\n             *\n             * @type {Autocomplete}\n             * @link https://developers.google.com/maps/documentation/javascript/reference#Autocomplete\n             */\n            autocomplete: null,\n\n            /**\n             * Autocomplete input text\n             * @type {String}\n             */\n            autocompleteText: ''\n        };\n    },\n\n    watch: {\n        autocompleteText: function autocompleteText(newVal, oldVal) {\n            this.$emit('inputChange', { newVal: newVal, oldVal: oldVal });\n        }\n    },\n\n    mounted: function mounted() {\n        var _this = this;\n\n        var options = {};\n\n        if (this.types) {\n            options.types = [this.types];\n        }\n\n        if (this.country) {\n            options.componentRestrictions = {\n                country: this.country\n            };\n        }\n\n        this.autocomplete = new google.maps.places.Autocomplete(document.getElementById(this.id), options);\n\n        this.autocomplete.addListener('place_changed', function() {\n\n            var place = _this.autocomplete.getPlace();\n\n            if (!place.geometry) {\n                // User entered the name of a Place that was not suggested and\n                // pressed the Enter key, or the Place Details request failed.\n                _this.$emit('no-results-found', place);\n                return;\n            }\n\n            var addressComponents = {\n                locality: 'long_name',\n                administrative_area_level_1: 'short_name',\n                country: 'long_name',\n            };\n\n            var returnData = {};\n\n            if (place.address_components !== undefined) {\n                // Get each component of the address from the place details\n                for (var i = 0; i < place.address_components.length; i++) {\n                    var addressType = place.address_components[i].types[0];\n\n                    if (addressComponents[addressType]) {\n                        var val = place.address_components[i][addressComponents[addressType]];\n                        returnData[addressType] = val;\n                    }\n                }\n\n                returnData['latitude'] = place.geometry.location.lat();\n                returnData['longitude'] = place.geometry.location.lng();\n\n                // return returnData object and PlaceResult object\n                _this.$emit('placechanged', returnData, place, _this.id);\n\n                // update autocompleteText then emit change event\n                _this.autocompleteText = document.getElementById(_this.id).value;\n                _this.onChange();\n            }\n        });\n    },\n\n    methods: {\n        /**\n         * When the input gets focus\n         */\n        onFocus: function onFocus() {\n            this.geolocate();\n            this.$emit('focus');\n        },\n\n\n        /**\n         * When the input loses focus\n         */\n        onBlur: function onBlur() {\n            this.$emit('blur');\n        },\n\n\n        /**\n         * When the input got changed\n         */\n        onChange: function onChange() {\n            this.$emit('change', this.autocompleteText);\n        },\n\n\n        /**\n         * When a key gets pressed\n         * @param  {Event} event A keypress event\n         */\n        onKeyPress: function onKeyPress(event) {\n            this.$emit('keypress', event);\n        },\n\n\n        /**\n         * Clear the input\n         */\n        clear: function clear() {\n            this.autocompleteText = '';\n        },\n\n\n        /**\n         * Focus the input\n         */\n        focus: function focus() {\n            this.$refs.autocomplete.focus();\n        },\n\n\n        /**\n         * Blur the input\n         */\n        blur: function blur() {\n            this.$refs.autocomplete.blur();\n        },\n\n\n        /**\n         * Update the value of the input\n         * @param  {String} value\n         */\n        update: function update(value) {\n            this.autocompleteText = value;\n        },\n\n\n        // Bias the autocomplete object to the user's geographical location,\n        // as supplied by the browser's 'navigator.geolocation' object.\n        geolocate: function geolocate() {\n            var _this2 = this;\n\n            if (this.enableGeolocation) {\n                if (navigator.geolocation) {\n                    navigator.geolocation.getCurrentPosition(function(position) {\n                        var geolocation = {\n                            lat: position.coords.latitude,\n                            lng: position.coords.longitude\n                        };\n                        var circle = new google.maps.Circle({\n                            center: geolocation,\n                            radius: position.coords.accuracy\n                        });\n                        _this2.autocomplete.setBounds(circle.getBounds());\n                    });\n                }\n            }\n        }\n    }\n};\n"]}