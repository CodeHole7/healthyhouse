{"version":3,"sources":["components/risk_inform.js"],"names":["$autocomplete","$","$risk_form","on","e","preventDefault","length","google","maps","places","Autocomplete","types","componentRestrictions","country","navigator","geolocation","getCurrentPosition","position","geolocate","latitude","lat","coords","lng","radius","accuracy","center","circle","getBounds","undefined","place","locality","inform_risk","address_components","autocomplete","getPlace","i","toLowerCase","_utils","url","attr","renderMessages","ajax","municipality","method","html","data","charAt","toUpperCase","slice","contentType","success","slideDown","responseJSON","detail"],"mappings":"cAAA,WACE,IAAAA,EAAAC,EAAA,iBAGMC,EAAaD,EAAE,cAArB,GAAMC,EAAaD,OAAnB,CAGAC,EAAWC,GAAG,SAAU,SAACC,GAA4B,OAApBA,EAAEC,kBAAyB,IAD5D,IAAIL,EAAcM,IAAlBC,OAA0BC,KAAAC,OAAAC,aAAAV,EAAA,IAAEW,OAAA,WAAAC,uBAAAC,QAAA,QACKT,EAAEC,GAAAA,QAwCnC,WAFAS,UAAAC,aACAD,UAAAC,YAAAC,mBAAA,SAAAC,GACA,IAASC,GACHJ,IAAAA,EAAUC,OAAaI,SACzBL,IAAAA,EAAUC,OAAYC,WAElBI,EAAKH,IAASI,OAAOF,KAAAA,QACrBG,OAAKL,EAFPM,OAAAN,EAAAI,OAAAG,WAKEC,EAAQV,UAD0BW,EAAAC,iBA/C0B1B,EAApE,qBAAAE,GAAA,QAQA,WAHAH,IAAAA,EAAcG,EAAYe,WACxB,QAAAU,GAAAC,EAAA,CAKA,IAAIC,EAAW,KAHjB,IAAA,IAASC,KAAAA,EAATC,oBACE,GAAIH,EAAAA,QAAQI,WAAaC,EAAbF,mBAAZG,GAAyBD,SACrBL,EAASD,EAAAA,mBAAWO,GAAXP,UAAWQ,eAGtBN,IAEDA,EAAAD,EAAAG,mBAAA,GAAA,UAAAI,eAEDC,OAAIP,iBACFA,EAAAA,MACDQ,IAAApC,EAAAqC,KAAA,UACDF,OAAOG,MACLC,MAAKC,aAAAZ,GACLQ,YAAKpC,mBACLyC,QAAQ,SAFHC,GAGLC,EAAAA,cAAQH,KAAcZ,EAAAA,aAHjBgB,OAAA,GAAAC,cAAAH,EAAA,aAAAI,MAAA,IAILC,EAAAA,aAAaL,KAAAA,EAAA,OACbM,EAAAA,UAASN,KAAAA,EAAA,UACP3C,EAAE,kBAAFkD,aAEAlD,MAAE,SAAU2C,GACZ3C,OAAEuC,eAAkBW,SAApBN,EAAAO,aAAAC,eArCR","file":"risk_inform.js","sourcesContent":["(() => {\n  'use strict';\n\n  const $autocomplete = $('#autocomplete');\n  const $risk_form = $('#risk-form')\n\n  if(!$autocomplete.length) { return; } \n  $risk_form.on('submit', (e) => { e.preventDefault(); return false; })\n  const autocomplete = new google.maps.places.Autocomplete($autocomplete[0],\n    { types: [\"geocode\"], componentRestrictions: { country: \"dk\" } }\n  );\n\n  $autocomplete.on('focus', geolocate);\n  $('#autocomplete-btn').on('click', inform_risk)\n\n  function inform_risk() {\n    var place = autocomplete.getPlace();\n    if (place == undefined) return;\n    var locality = null;\n    for (var i in place.address_components) {\n      if ($.inArray(\"locality\", place.address_components[i][\"types\"]) != -1)\n        locality = place.address_components[i][\"long_name\"].toLowerCase();\n    }\n\n    if(!locality) {\n      locality = place.address_components[0][\"long_name\"].toLowerCase();\n    }\n    _utils.renderMessages();\n    $.ajax({\n      url: $risk_form.attr('action'),\n      method: 'get',\n      data: { municipality: locality },\n      contentType: \"application/json\",\n      success: function(html) {\n        $(\"#rdncls_ph\").html(html[\"municipality\"].charAt(0).toUpperCase() + html[\"municipality\"].slice(1));\n        $(\"#statspan\").html(html[\"level\"]);\n        $(\"#avgbq\").html(html[\"avglevel\"]);\n        $(\"#radonleveltxt\").slideDown();\n      },\n      error: function(data) {\n        _utils.renderMessages('danger', data.responseJSON.detail);\n      }\n    });\n  }\n\n  // Bias the autocomplete object to the user's geographical location,\n  // as supplied by the browser's 'navigator.geolocation' object.\n  function geolocate() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(function(position) {\n        var geolocation = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n        var circle = new google.maps.Circle({\n          center: geolocation,\n          radius: position.coords.accuracy\n        });\n        autocomplete.setBounds(circle.getBounds());\n      });\n    }\n  }\n})();"]}